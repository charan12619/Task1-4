import java.util.HashMap;

public class Main {
    static class TreeNode {
        int val;
        TreeNode left, right;
        TreeNode(int val) { this.val = val; }
    }

    public static int pathSum(TreeNode root, int targetSum) {
        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();
        prefixSumMap.put(0, 1);
        return dfs(root, 0, targetSum, prefixSumMap);
    }

    private static int dfs(TreeNode node, int currentSum, int target, HashMap<Integer, Integer> map) {
        if (node == null) return 0;
        currentSum += node.val;
        int res = map.getOrDefault(currentSum - target, 0);
        map.put(currentSum, map.getOrDefault(currentSum, 0) + 1);
        res += dfs(node.left, currentSum, target, map) + dfs(node.right, currentSum, target, map);
        map.put(currentSum, map.get(currentSum) - 1);
        return res;
    }

    public static void main(String[] args) {
        
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(5);
        root.right = new TreeNode(-3);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(2);
        root.right.right = new TreeNode(11);
        root.left.left.left = new TreeNode(3);
        root.left.left.right = new TreeNode(-2);
        root.left.right.right = new TreeNode(1);
        int targetSum = 8;
        System.out.println("Number of paths with sum " + targetSum + " = " + pathSum(root, targetSum));
    }
}
