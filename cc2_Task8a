import java.util.*;

public class Main {
    static class Flight {
        int to, price;
        Flight(int to, int price) {
            this.to = to;
            this.price = price;
        }
    }

    public static int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        Map<Integer, List<Flight>> graph = new HashMap<>();
        for (int[] f : flights) {
            graph.computeIfAbsent(f[0], k -> new ArrayList<>()).add(new Flight(f[1], f[2]));
        }
        Queue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, src, 0}); // {cost, node, stops}
        Map<Integer, Integer> visited = new HashMap<>();
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int cost = curr[0], node = curr[1], stops = curr[2];
            if (node == dst) return cost;
            if (stops > K) continue;
            if (visited.containsKey(node) && visited.get(node) <= stops) continue;
            visited.put(node, stops);
            if (!graph.containsKey(node)) continue;
            for (Flight f : graph.get(node)) {
                pq.offer(new int[]{cost + f.price, f.to, stops + 1});
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        // Input 1
        int n1 = 3;
        int[][] flights1 = {{0,1,200}, {1,2,100}, {0,2,500}};
        int src1 = 0, dst1 = 2, K1 = 1;
        System.out.println("Cheapest Price = " + findCheapestPrice(n1, flights1, src1, dst1, K1)); // Output: 300

        // Input 2
        int n2 = 4;
        int[][] flights2 = {{0,1,100}, {1,2,100}, {2,3,100}, {0,3,500}};
        int src2 = 0, dst2 = 3, K2 = 1;
        System.out.println("Cheapest Price = " + findCheapestPrice(n2, flights2, src2, dst2, K2)); // Output: 500
    }
}
