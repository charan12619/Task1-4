import java.util.*;

public class Main {
    public static int connectTwoGroups(List<List<Integer>> cost) {
        int m = cost.size(), n = cost.get(0).size();
        int[] minCost = new int[n];
        Arrays.fill(minCost, Integer.MAX_VALUE);
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                minCost[j] = Math.min(minCost[j], cost.get(i).get(j));
        int[][] dp = new int[m + 1][1 << n];
        for (int[] d : dp) Arrays.fill(d, Integer.MAX_VALUE / 2);
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                for (int j = 0; j < n; j++) {
                    int nextMask = mask | (1 << j);
                    dp[i + 1][nextMask] = Math.min(dp[i + 1][nextMask],
                            dp[i][mask] + cost.get(i).get(j));
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int mask = 0; mask < (1 << n); mask++) {
            int total = dp[m][mask];
            for (int j = 0; j < n; j++) {
                if ((mask & (1 << j)) == 0) total += minCost[j];
            }
            res = Math.min(res, total);
        }
        return res;
    }

    public static void main(String[] args) {
        List<List<Integer>> costList = new ArrayList<>();
        costList.add(Arrays.asList(15, 96));
        costList.add(Arrays.asList(36, 2));
        int minCost = connectTwoGroups(costList);
        System.out.println("Minimum cost = " + minCost); // Output: 17
    }
}
